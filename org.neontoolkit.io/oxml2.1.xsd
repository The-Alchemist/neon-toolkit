<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://schema.ontoprise.com/oxml/core/2.1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://schema.ontoprise.com/oxml/core/2.1">

    <xsd:element name="ontology" type="ontologyType">
		<xsd:annotation>
			<xsd:documentation>

2007-12-18
	- added explicitConcept attribute for concept-elements. Default is true. Only if true, the concept is added to the concept_/1 predicate.
2007
	- added import-element for OXML files to import other ontologies (identified by their ID)
	
2005-01-05
    - added functionality to store queries with their IDs, this is done analogous to rules, i.e. axioms

2004-09-20 This is OXML 2.1
    - streamlining with new DataModel
        - changed references to other ontologies
        - removed systemRepresentation
        - removed baseUri
        - removed about-data for ontologies
        - removed root-concept and root-relation of ontologies
        - removed abstract-property of classes
        - removed default values for properties
        - removed subRelationOf property
        - removed composedOf
        - removed PredicateType
        - removed ModuleType
        - removed "enabled" for axioms
        - added inverseDomain for inverse relations

OXML 2.0h:
	- added processor-attribute to ModuleType and changed its ID to QName
OXML 2.0 g:
	- only for internal purposes
changes in OXML 2.0 f:
	- added algebraic properties to (binary) predicates
changes in OXML 2.0 epsilon:
	- removed xml:lang-attribute and renamed it to language with xsd:string as range
	- multiple parametertypes are possible in relation definitions (now sublement paramter instead of attribute)
	- multiple parameters may be given for instance relations and attributes (sublement paramter)
	- added PredicateInstanceType
changes in OXML 2.0 delta:
	- renamed attributes of importOntology-Element from "ontologyTitle" to "title" etc.
	- removed domain concept attributes from elements that refer to relations, such as inverseOf or subrelationOf (cf. datamodel)
	- changed @instantiation-Attribute of concept to @abstract of type boolean (default = false)
	- added rootRelation and rootConcept-attributes to ontology
	- changed xsd-anySimpleType to xsd:anySimpleType ??? now xsd:string (in default/@value and hasAttribute/@value) , because Xerces 1.4 does not support it
	- altered the parameter handling in instances and relations, i.e. at most one parameter may be present (now as an attribute value @parameter, resp. @parameterType)
changes in OXML 2.0 gamma:
	- added predicate-element
	- moved special-axiom-properties of concepts and releations (from axiom-element) directly to their definitions
changes in OXML 2.0 beta:
	- added import-sections to refer to used ontologies
	- modularization mechanism: CORE-module-Element with attributes and ANY-##other-content
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="topLevelType">
		<xsd:choice maxOccurs="unbounded" minOccurs="0">
			<xsd:element name="documentation" type="multiLingualTextType"/>
			<xsd:element name="externalRepresentation" type="multiLingualTextType"/>
			<xsd:element name="metaRelation">
                <xsd:complexType>
					<xsd:simpleContent>
						<xsd:extension base="xsd:string">
							<xsd:attribute name="relation" type="relationID" use="required"/>
							<xsd:attribute name="instance" type="instanceID" use="optional"/>
<!-- textual content is the value of literal metaRelations -->
						</xsd:extension>
					</xsd:simpleContent>
				</xsd:complexType>
			</xsd:element>
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="ontologyType">
		<xsd:complexContent>
			<xsd:extension base="topLevelType">
				<xsd:sequence>
					<xsd:element maxOccurs="unbounded" minOccurs="0" name="import">
						<xsd:complexType>
							<xsd:attribute name="id" type="ontologyID" use="required"/>
						</xsd:complexType>
					</xsd:element>
					<xsd:choice maxOccurs="unbounded" minOccurs="0">
						<xsd:element name="concept" type="conceptType"/>
						<xsd:element name="relation" type="relationType"/>
						<xsd:element name="instance" type="instanceType"/>
						<xsd:element name="axiom" type="axiomType"/>
						<xsd:element name="query" type="axiomType"/>
						<xsd:element name="predicateInstance" type="predicateInstanceType"/>
					</xsd:choice>
				</xsd:sequence>
				<xsd:attribute name="id" type="ontologyID" use="required"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="conceptType">
		<xsd:complexContent>
			<xsd:extension base="topLevelType">
				<xsd:choice maxOccurs="unbounded" minOccurs="0">
					<xsd:element name="subConceptOf">
						<xsd:complexType>
							<xsd:attribute name="concept" type="conceptID" use="required"/>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="disjointWith">
						<xsd:complexType>
							<xsd:attribute name="concept" type="conceptID" use="required"/>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="relation">
						<xsd:annotation>
							<xsd:documentation>restricts the global relationType, i.e. prohibits the use of the domain attribute
???change in final version</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:complexContent>
								<xsd:extension base="relationType"/>
							</xsd:complexContent>
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
				<xsd:attribute name="id" type="conceptID" use="required"/>
                <xsd:attribute name="explicitConcept" type="xsd:boolean"/>
            </xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="relationType">
		<xsd:complexContent>
			<xsd:extension base="topLevelType">
				<xsd:sequence>
					<xsd:choice maxOccurs="unbounded" minOccurs="0">
						<xsd:element name="algebraicProperty">
							<xsd:complexType>
								<xsd:attribute name="property" type="algebraicPropertyType" use="required"/>
							</xsd:complexType>
						</xsd:element>
						<xsd:element name="inverseRelationOf">
							<xsd:complexType>
								<xsd:attribute name="relation" type="relationID" use="required"/>
								<xsd:attribute name="domain" type="relationID" use="required"/>
							</xsd:complexType>
						</xsd:element>
<!--
						<xsd:element name="parameter">
							<xsd:documentation>not sure about its semantics</xsd:documentation>
							<xsd:complexType>
								<xsd:attribute name="type" type="conceptID" use="required"/>
							</xsd:complexType>
						</xsd:element>
-->
					</xsd:choice>
				</xsd:sequence>
				<xsd:attribute name="domain" type="conceptID" use="optional"/>
				<xsd:attribute name="range" type="conceptID" use="optional"/>
				<xsd:attribute name="minCard" type="cardinalityType" use="optional"/>
				<xsd:attribute name="maxCard" type="cardinalityType" use="optional"/>
				<xsd:attribute name="id" type="relationID" use="required"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="instanceType">
		<xsd:complexContent>
			<xsd:extension base="topLevelType">
				<xsd:choice maxOccurs="unbounded" minOccurs="0">
					<xsd:element name="instanceOf">
						<xsd:complexType>
							<xsd:attribute name="concept" type="conceptID" use="required"/>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="hasRelation">
						<xsd:complexType>
<!--							<xsd:sequence>
								<xsd:element name="parameter" minOccurs="0" maxOccurs="unbounded">
									<xsd:complexType>
										<xsd:attribute name="value" type="xsd:string" use="optional"/>
										<xsd:attribute name="instance" type="instanceID" use="optional"/>
									</xsd:complexType>
								</xsd:element>
							</xsd:sequence>
-->
							<xsd:attribute name="relation" type="relationID" use="required"/>
							<xsd:attribute name="instance" type="instanceID" use="required"/>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="hasAttribute">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element minOccurs="0" name="value"/>
<!--
								<xsd:element name="parameter" minOccurs="0" maxOccurs="unbounded">
									<xsd:complexType>
										<xsd:attribute name="value" type="xsd:string" use="optional"/>
										<xsd:attribute name="instance" type="instanceID" use="optional"/>
									</xsd:complexType>
								</xsd:element>
							</xsd:sequence>
-->
</xsd:sequence>
							<xsd:attribute name="relation" type="relationID" use="required"/>
							<xsd:attribute name="value" type="xsd:string" use="optional"/>
							<xsd:attribute name="range" type="conceptID" use="optional"/>
													
													</xsd:complexType>
					</xsd:element>
				</xsd:choice>
				<xsd:attribute name="id" type="instanceID" use="required"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="axiomType">
		<xsd:complexContent>
			<xsd:extension base="topLevelType">
				<xsd:sequence>
					<xsd:element maxOccurs="unbounded" minOccurs="0" name="text">
						<xsd:complexType>
							<xsd:simpleContent>
								<xsd:extension base="xsd:string">
									<xsd:attribute default="flogic" name="language" type="xsd:string"/>
								</xsd:extension>
							</xsd:simpleContent>
						</xsd:complexType>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="id" type="axiomID" use="required"/>
				<xsd:attribute name="type" type="xsd:string"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="predicateInstanceType">
		<xsd:sequence>
			<xsd:element maxOccurs="unbounded" minOccurs="0" name="argument">
				<xsd:complexType>
					<xsd:simpleContent>
						<xsd:extension base="xsd:string">
							<xsd:attribute name="instance" type="instanceID" use="optional"/>
							<xsd:attribute name="value" type="xsd:string" use="optional"/>
						</xsd:extension>
					</xsd:simpleContent>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="predicate" type="predicateID" use="required"/>
	</xsd:complexType>
	<!--### What follows are Helper-Types. ################################################# -->
	<xsd:complexType name="multiLingualTextType">
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
				<xsd:attribute default="en" name="language" type="xsd:string"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<xsd:simpleType name="cardinalityType">
		<xsd:annotation>
			<xsd:documentation>Used for mincard and maxcard in domain and range restrictions.
			0, 1, n, m, 100, * etc. are valid.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:pattern value="[0-9]+|\*|n|m"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="algebraicPropertyType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="symmetric"/>
			<xsd:enumeration value="reflexive"/>
			<xsd:enumeration value="transitive"/>
			<xsd:enumeration value="antisymmetric"/>
			<xsd:enumeration value="asymmetric"/>
			<xsd:enumeration value="irreflexive"/>
			<xsd:enumeration value="intransitive"/>
		</xsd:restriction>
	</xsd:simpleType>
	<!--### The following simple types ending with "idType" represent unique names for certain types of top level entities of an ontology. ################################################# -->
	<xsd:simpleType name="idType">
		<xsd:annotation>
			<xsd:documentation>
				An ID identifies each entity in the ontology globally uniquely,
				esp. relations and concepts etc. may not have the same ID.
				An ID is a QName, i.e. namespace-prefix + colon + local-name.
				Similar to RDF-resources.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:QName"/>
	</xsd:simpleType>
	<xsd:simpleType name="ontologyID">
		<xsd:annotation>
			<xsd:documentation>Should be a subtype of idType, but ontologies actually consist only of a namespace without a local part.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:anyURI"/>
	</xsd:simpleType>
	<xsd:simpleType name="conceptID">
		<xsd:annotation>
			<xsd:documentation>Used for concept-entities.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="idType"/>
	</xsd:simpleType>
	<xsd:simpleType name="relationID">
		<xsd:annotation>
			<xsd:documentation>Used for relation-entities -- global and local.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="idType"/>
	</xsd:simpleType>
	<xsd:simpleType name="instanceID">
		<xsd:annotation>
			<xsd:documentation>Used for instances-entities.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="idType"/>
	</xsd:simpleType>
	<xsd:simpleType name="axiomID">
		<xsd:annotation>
			<xsd:documentation>Used for axiom-entities (now only general axioms or queries).</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="idType"/>
	</xsd:simpleType>
	<xsd:simpleType name="predicateID">
		<xsd:annotation>
			<xsd:documentation>Used for predicates.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="idType"/>
	</xsd:simpleType>
</xsd:schema>
